import React, { useState } from 'react';
import { Brain, CheckCircle, XCircle, RefreshCw, Loader } from 'lucide-react';
import { aiAPI } from '../../services/api';
import toast from 'react-hot-toast';

interface Question {
  question: string;
  options: string[];
  correctAnswer: number;
}

interface AssessmentResult {
  score: number;
  totalQuestions: number;
  feedback: string;
  detailedFeedback: string;
  wrongAnswers: Array<{
    question: string;
    userAnswer: string;
    correctAnswer: string;
    explanation: string;
  }>;
  strengths: string[];
  improvements: string[];
}

const AIPracticeSection: React.FC = () => {
  const [formData, setFormData] = useState({
    domain: '',
    difficulty: 'MEDIUM' as 'EASY' | 'MEDIUM' | 'HARD',
    numberOfQuestions: 5,
  });
  const [questions, setQuestions] = useState<Question[]>([]);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<number[]>([]);
  const [loading, setLoading] = useState(false);
  const [results, setResults] = useState<AssessmentResult | null>(null);
  const [step, setStep] = useState<'setup' | 'questions' | 'results'>('setup');

  const generateAssessment = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.domain.trim()) {
      toast.error('Please enter a domain to practice');
      return;
    }
    
    setLoading(true);

    try {
      const response = await aiAPI.generateAssessment(formData);
      
      if (!response.data.questions || response.data.questions.length === 0) {
        throw new Error('No questions generated by AI');
      }
      
      setQuestions(response.data.questions);
      setAnswers(new Array(response.data.questions.length).fill(-1));
      setStep('questions');
      toast.success('AI-generated assessment ready!');
    } catch (error) {
      console.error('AI Assessment Error:', error);
      toast.error('Failed to generate AI assessment. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleAnswerSelect = (answerIndex: number) => {
    const newAnswers = [...answers];
    newAnswers[currentQuestion] = answerIndex;
    setAnswers(newAnswers);
  };

  const nextQuestion = () => {
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      submitAssessment();
    }
  };

  const prevQuestion = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1);
    }
  };

  const submitAssessment = async () => {
    setLoading(true);
    
    try {
      // Send to AI for evaluation and feedback
      const evaluationData = {
        domain: formData.domain,
        difficulty: formData.difficulty,
        questions: questions,
        answers: answers,
      };

      const response = await aiAPI.evaluateAnswers(evaluationData);
      setResults(response.data);
      setStep('results');
      toast.success('AI evaluation completed!');
    } catch (error) {
      toast.error('Failed to get AI evaluation');
    } finally {
      setLoading(false);
    }
  };

  const resetAssessment = () => {
    setStep('setup');
    setQuestions([]);
    setAnswers([]);
    setCurrentQuestion(0);
    setResults(null);
  };

  if (step === 'setup') {
    return (
      <div className="p-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">AI Practice Assessment</h1>
          <p className="text-gray-600">Generate custom practice tests with AI-powered questions and evaluation</p>
        </div>

        <div className="max-w-2xl mx-auto bg-white rounded-lg shadow-md p-8">
          <div className="flex items-center justify-center mb-6">
            <div className="w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
              <Brain className="w-8 h-8 text-white" />
            </div>
          </div>
          
          <h2 className="text-xl font-semibold text-gray-900 mb-6 text-center">AI-Powered Practice Test</h2>
          
          <form onSubmit={generateAssessment} className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Domain to Practice
              </label>
              <input
                type="text"
                value={formData.domain}
                onChange={(e) => setFormData({ ...formData, domain: e.target.value })}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                placeholder="e.g., JavaScript, Python, Machine Learning, Data Structures"
                required
              />
              <p className="text-xs text-gray-500 mt-1">AI will generate questions specific to this domain</p>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Difficulty Level
              </label>
              <select
                value={formData.difficulty}
                onChange={(e) => setFormData({ ...formData, difficulty: e.target.value as any })}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
              >
                <option value="EASY">Easy - Basic concepts and fundamentals</option>
                <option value="MEDIUM">Medium - Intermediate level questions</option>
                <option value="HARD">Hard - Advanced and complex problems</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Number of Questions
              </label>
              <select
                value={formData.numberOfQuestions}
                onChange={(e) => setFormData({ ...formData, numberOfQuestions: parseInt(e.target.value) })}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
              >
                <option value={5}>5 Questions (Quick Practice)</option>
                <option value={10}>10 Questions (Standard)</option>
                <option value={15}>15 Questions (Comprehensive)</option>
                <option value={20}>20 Questions (Full Assessment)</option>
              </select>
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-gradient-to-r from-green-600 to-teal-600 text-white py-3 rounded-lg font-semibold hover:from-green-700 hover:to-teal-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all"
            >
              {loading ? (
                <div className="flex items-center justify-center">
                  <Loader className="animate-spin h-5 w-5 mr-3" />
                  AI is generating questions...
                </div>
              ) : (
                'Generate AI Practice Test'
              )}
            </button>
          </form>
        </div>
      </div>
    );
  }

  if (step === 'questions') {
    const question = questions[currentQuestion];
    const progress = ((currentQuestion + 1) / questions.length) * 100;

    return (
      <div className="p-8">
        <div className="max-w-4xl mx-auto">
          {/* Progress Bar */}
          <div className="mb-8">
            <div className="flex justify-between items-center mb-2">
              <span className="text-sm font-medium text-gray-700">
                Question {currentQuestion + 1} of {questions.length}
              </span>
              <span className="text-sm font-medium text-gray-700">
                {Math.round(progress)}% Complete
              </span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div 
                className="bg-gradient-to-r from-blue-600 to-purple-600 h-2 rounded-full transition-all duration-300"
                style={{ width: `${progress}%` }}
              ></div>
            </div>
          </div>

          {/* Question */}
          <div className="bg-white rounded-lg shadow-md p-8">
            <div className="flex items-center mb-4">
              <Brain className="w-6 h-6 text-blue-600 mr-2" />
              <span className="text-sm text-blue-600 font-medium">AI Generated Question</span>
            </div>
            
            <h2 className="text-xl font-semibold text-gray-900 mb-6">
              {question.question}
            </h2>

            <div className="space-y-3 mb-8">
              {question.options.map((option, index) => (
                <button
                  key={index}
                  onClick={() => handleAnswerSelect(index)}
                  className={`w-full text-left p-4 border-2 rounded-lg transition-all ${
                    answers[currentQuestion] === index
                      ? 'border-blue-500 bg-blue-50 text-blue-700'
                      : 'border-gray-300 hover:border-blue-300 hover:bg-gray-50'
                  }`}
                >
                  <div className="flex items-center">
                    <span className="w-6 h-6 rounded-full border-2 border-current mr-3 flex items-center justify-center text-sm font-semibold">
                      {String.fromCharCode(65 + index)}
                    </span>
                    {option}
                  </div>
                </button>
              ))}
            </div>

            {/* Navigation */}
            <div className="flex justify-between">
              <button
                onClick={prevQuestion}
                disabled={currentQuestion === 0}
                className="px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                Previous
              </button>
              
              <button
                onClick={nextQuestion}
                disabled={answers[currentQuestion] === -1 || loading}
                className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center"
              >
                {loading && currentQuestion === questions.length - 1 ? (
                  <>
                    <Loader className="animate-spin h-4 w-4 mr-2" />
                    AI Evaluating...
                  </>
                ) : (
                  currentQuestion === questions.length - 1 ? 'Submit for AI Evaluation' : 'Next'
                )}
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (step === 'results' && results) {
    const percentage = Math.round((results.score / results.totalQuestions) * 100);
    
    return (
      <div className="p-8">
        <div className="max-w-4xl mx-auto">
          {/* Results Summary */}
          <div className="bg-white rounded-lg shadow-md p-8 mb-8">
            <div className="text-center mb-8">
              <div className="mx-auto w-24 h-24 bg-gradient-to-r from-blue-100 to-purple-100 rounded-full flex items-center justify-center mb-4">
                <Brain className="w-12 h-12 text-blue-600" />
              </div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">AI Assessment Complete!</h1>
              <div className="text-6xl font-bold text-blue-600 mb-2">{percentage}%</div>
              <p className="text-xl text-gray-600">
                {results.score} out of {results.totalQuestions} correct
              </p>
            </div>

            <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg p-6 mb-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-2 flex items-center">
                <Brain className="w-5 h-5 mr-2 text-blue-600" />
                AI Feedback
              </h3>
              <p className="text-gray-700 mb-4">{results.feedback}</p>
              <p className="text-gray-600 text-sm">{results.detailedFeedback}</p>
            </div>

            {/* Strengths and Improvements */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
              <div className="bg-green-50 rounded-lg p-4">
                <h4 className="font-semibold text-green-800 mb-3 flex items-center">
                  <CheckCircle className="w-4 h-4 mr-2" />
                  Strengths
                </h4>
                <ul className="space-y-1">
                  {results.strengths.map((strength, index) => (
                    <li key={index} className="text-green-700 text-sm">• {strength}</li>
                  ))}
                </ul>
              </div>
              
              <div className="bg-yellow-50 rounded-lg p-4">
                <h4 className="font-semibold text-yellow-800 mb-3 flex items-center">
                  <XCircle className="w-4 h-4 mr-2" />
                  Areas for Improvement
                </h4>
                <ul className="space-y-1">
                  {results.improvements.map((improvement, index) => (
                    <li key={index} className="text-yellow-700 text-sm">• {improvement}</li>
                  ))}
                </ul>
              </div>
            </div>

            <div className="flex justify-center space-x-4">
              <button
                onClick={resetAssessment}
                className="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center"
              >
                <RefreshCw className="w-5 h-5 mr-2" />
                Take Another AI Test
              </button>
            </div>
          </div>

          {/* Wrong Answers Review */}
          {results.wrongAnswers.length > 0 && (
            <div className="bg-white rounded-lg shadow-md p-8">
              <h2 className="text-xl font-semibold text-gray-900 mb-6 flex items-center">
                <Brain className="w-5 h-5 mr-2 text-blue-600" />
                AI-Powered Answer Analysis
              </h2>
              
              <div className="space-y-6">
                {results.wrongAnswers.map((wrongAnswer, index) => (
                  <div key={index} className="border-l-4 border-red-500 pl-6 py-4 bg-red-50 rounded-r-lg">
                    <h3 className="font-semibold text-gray-900 mb-3">{wrongAnswer.question}</h3>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                      <div className="flex items-center text-red-600">
                        <XCircle className="w-5 h-5 mr-2" />
                        <span><strong>Your answer:</strong> {wrongAnswer.userAnswer}</span>
                      </div>
                      <div className="flex items-center text-green-600">
                        <CheckCircle className="w-5 h-5 mr-2" />
                        <span><strong>Correct answer:</strong> {wrongAnswer.correctAnswer}</span>
                      </div>
                    </div>

                    <div className="bg-blue-50 rounded-lg p-4">
                      <h4 className="font-medium text-blue-800 mb-2 flex items-center">
                        <Brain className="w-4 h-4 mr-2" />
                        AI Explanation
                      </h4>
                      <p className="text-blue-700 text-sm">{wrongAnswer.explanation}</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    );
  }

  return null;
};

export default AIPracticeSection;